<%- include('partials/header'); -%>

<form action="/signup">
  <h2>Sign up</h2>
  
  <label for="firstName">First Name</label>
  <input type="text" name="firstName" required />
  <div class="firstName error"></div>
  
  <label for="lastName">Last Name</label>
  <input type="text" name="lastName" required />
  <div class="lastName error"></div>
  
  <label for="email">Email</label>
  <input type="email" name="email" required />
  <div class="email error"></div>
  
  <label for="password">Password</label>
  <input type="password" name="password" required />
  <div class="password error"></div>
  
  <label for="confirmPassword">Confirm Password</label>
  <input type="password" name="confirmPassword" required />
  <div class="confirmPassword error"></div>
  
  <label class="checkbox-container">
    <input type="checkbox" name="termsAgreed" required />
    <span class="checkmark"></span>
    I agree to the <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a>
  </label>
  <div class="termsAgreed error"></div>
  
  <button>Sign up</button>
</form>

<%- include('partials/footer'); -%>

<script>
  const form = document.querySelector('form');
  const firstNameError = document.querySelector('.firstName.error');
  const lastNameError = document.querySelector('.lastName.error');
  const emailError = document.querySelector('.email.error');
  const passwordError = document.querySelector('.password.error');
  const confirmPasswordError = document.querySelector('.confirmPassword.error');
  const termsAgreedError = document.querySelector('.termsAgreed.error');

  // Real-time password confirmation validation
  const password = form.password;
  const confirmPassword = form.confirmPassword;
  
  confirmPassword.addEventListener('input', () => {
    if (password.value !== confirmPassword.value && confirmPassword.value !== '') {
      confirmPasswordError.textContent = 'Passwords do not match';
      confirmPassword.classList.add('error-input');
    } else {
      confirmPasswordError.textContent = '';
      confirmPassword.classList.remove('error-input');
    }
  });

  // Clear errors when user starts typing
  [form.firstName, form.lastName, form.email, form.password, form.confirmPassword].forEach(input => {
    input.addEventListener('input', () => {
      const errorDiv = document.querySelector(`.${input.name}.error`);
      if (errorDiv) {
        errorDiv.textContent = '';
        input.classList.remove('error-input');
      }
    });
  });

  // Clear terms error when checkbox is clicked
  form.termsAgreed.addEventListener('change', () => {
    termsAgreedError.textContent = '';
  });

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Reset errors
    firstNameError.textContent = '';
    lastNameError.textContent = '';
    emailError.textContent = '';
    passwordError.textContent = '';
    confirmPasswordError.textContent = '';
    termsAgreedError.textContent = '';

    // Remove error styling
    form.querySelectorAll('.error-input').forEach(input => {
      input.classList.remove('error-input');
    });

    // Get values
    const firstName = form.firstName.value;
    const lastName = form.lastName.value;
    const email = form.email.value;
    const password = form.password.value;
    const confirmPassword = form.confirmPassword.value;
    const termsAgreed = form.termsAgreed.checked;

    // Client-side validation
    let hasErrors = false;

    if (password !== confirmPassword) {
      confirmPasswordError.textContent = 'Passwords do not match';
      confirmPassword.classList.add('error-input');
      hasErrors = true;
    }

    if (!termsAgreed) {
      termsAgreedError.textContent = 'You must agree to the terms and conditions';
      hasErrors = true;
    }

    if (hasErrors) return;

    try {
      const res = await fetch('/signup', { 
        method: 'POST', 
        body: JSON.stringify({ 
          firstName, 
          lastName, 
          email, 
          password, 
          confirmPassword,
          termsAgreed: termsAgreed ? 'true' : 'false'
        }),
        headers: {'Content-Type': 'application/json'}
      });
      
      const data = await res.json();
      console.log(data);
      
      if (data.errors) {
        // Display server errors
        if (data.errors.firstName) {
          firstNameError.textContent = data.errors.firstName;
          form.firstName.classList.add('error-input');
        }
        if (data.errors.lastName) {
          lastNameError.textContent = data.errors.lastName;
          form.lastName.classList.add('error-input');
        }
        if (data.errors.email) {
          emailError.textContent = data.errors.email;
          form.email.classList.add('error-input');
        }
        if (data.errors.password) {
          passwordError.textContent = data.errors.password;
          form.password.classList.add('error-input');
        }
        if (data.errors.confirmPassword) {
          confirmPasswordError.textContent = data.errors.confirmPassword;
          form.confirmPassword.classList.add('error-input');
        }
        if (data.errors.termsAgreed) {
          termsAgreedError.textContent = data.errors.termsAgreed;
        }
      }
      
      if (data.user) {
        location.assign('/');
      }
    }
    catch (err) {
      console.log(err);
      alert('An error occurred. Please try again.');
    }
  });
</script>